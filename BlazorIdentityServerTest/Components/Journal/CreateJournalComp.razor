@using Contabo.ObjectStorage.S3
@inject AttachmentService _attachmentService

<IsLoading Loading="@Loading"></IsLoading>


<div class="mb-3">
    <div class="form-label">Journal tekst</div>
    <textarea class="form-control" @bind="Journal.Text" rows="4"></textarea>
</div>
<div class="mb-3">
    <div class="form-label">Vedhæft fil</div>
    <InputFile accept="@("." + FileTypes.Aggregate((a,b) => a +", ."+ b))" OnChange="@LoadFiles" class="form-control" />
    <p class="text-muted">Vedhæft må ikke fylde mere end 50 MB.</p>
</div>


<div class="mb-3 mt-4">
    <div class="row">
        <span class="col form-label">Vedhæftet filer</span>

        <span class='col-auto btn btn-danger @(journal.Attachments.Where(x => x.Delete == true).Count() > 0 ? "" :"disabled")'
            @onclick="DeleteSelected" style="padding:3px 10px;margin-right:10px;margin-bottom:5px;margin-top:-5px">
            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-trash-x" width="24" height="24"
                viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round"
                stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
                <path d="M4 7h16"></path>
                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"></path>
                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"></path>
                <path d="M10 12l4 4m0 -4l-4 4"></path>
            </svg>
            Slet
        </span>
    </div>

    <div class="form-selectgroup form-selectgroup-boxes d-flex flex-column">
        @foreach (Attachment item in journal.Attachments)
        {
            <label class="form-selectgroup-item flex-fill">
                <input type="checkbox" class="form-selectgroup-input" readonly checked="@item.Delete"
                @oninput="() => item.Delete = !item.Delete">
                <div class="form-selectgroup-label d-flex align-items-center p-3">
                    <div class="me-3">
                        <span class="form-selectgroup-check"></span>
                    </div>
                    <div class="form-selectgroup-label-content d-flex align-items-center">
                        <span class="avatar me-3">@item.Type</span>
                        <div>
                            <a href="@item.Uri" target="_blank" class="font-weight-medium">@item.Filename</a>
                        </div>
                    </div>
                </div>
                @if (PreviewAllowed.Contains(item.Type))
                {
                    <div class="attach-preview">
                        <img src="@item.Uri">
                    </div>
                }
            </label>
        }
    </div>
</div>


@code {
    public ContaboS3File S3File { get; set; }
    public bool Loading { get; set; }
    public List<string> FileTypes { get; set; }
    public List<string> PreviewAllowed { get; set; }

    public async void DeleteSelected()
    {
        Journal.Attachments = journal.Attachments.Where(x => x.Delete == false).ToList();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        NextAvailable = true;
        FileTypes = new List<string>(){
"png", "jpeg", "jpg", "zip", "pdf"
};
        PreviewAllowed = new List<string>()
{
"png", "jpeg", "jpg"
};


    }

    public async void LoadFiles(InputFileChangeEventArgs e)
    {
        Loading = true;
        try
        {
            Attachment newFile = await _attachmentService.UploadFile(e.File, e.File.Name, 1);
            journal.Attachments.Add(newFile);
            await InvokeAsync(() =>
            {
                Loading = false;
                StateHasChanged();
            });
        }
        catch (Exception)
        {
            Loading = false;
            await Swal.FireAsync("Oops...", "Filen er for stor. Max størrelse er 50 MB", "error");
        }
    }





    private bool nextAvailable { get; set; }

    [Parameter]
    public bool NextAvailable
    {
        get { return nextAvailable; }
        set
        {
            if (nextAvailable != value)
            {
                nextAvailable = value;
                if (NextAvailableChanged.HasDelegate)
                {
                    NextAvailableChanged.InvokeAsync(value);
                }
            }
        }
    }
    [Parameter]
    public EventCallback<bool> NextAvailableChanged { get; set; }



    private Journal journal { get; set; }

    [Parameter]
    public Journal Journal
    {
        get { return journal; }
        set
        {
            if (journal != value)
            {
                journal = value;
                if (JournalChanged.HasDelegate)
                {
                    JournalChanged.InvokeAsync(value);
                }
            }
        }
    }
    [Parameter]
    public EventCallback<Journal> JournalChanged { get; set; }
}